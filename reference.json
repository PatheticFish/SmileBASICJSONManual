{
	"CLEAR":{
		"description":"Initializes the BASIC internal memory\n\t\tDIRECT mode only",
		"parameters":"CLEAR"
	},
	"NEW":{
		"description":"Erases programs\n\t\tDIRECT mode only",
		"parameters":"NEW [Program SLOT]"
	},
	"LIST":{
		"description":"Switches to EDIT mode and starts editing\n\t\t- DIRECT mode only\n\t\t- Using LIST with no argument is equal to pressing the EDIT button",
		"parameters":"LIST [ Line number/ERR ]"
	},
	"RUN":{
		"description":"Program execution\n\t\tDIRECT mode only",
		"parameters":"RUN [Program SLOT]"
	},
	"CONT":{
		"description":"Resumes a suspended program\n\t\t- DIRECT mode only\n\t\t- Execution is resumed from the location it was suspended at using the START button, the STOP instruction, or due to an error\n\t\t- If the program has been stopped and then edited, it cannot be resumed\n\t\t- If the program was suspended while waiting for user input, it cannot be resumed\n\t\t- The program may not be able to be resumed depending on the type of error that occurred",
		"parameters":"CONT"
	},
	"PROJECT (1)":{
		"description":"Switches the default project\n\t\tDIRECT mode only",
		"parameters":"PROJECT \"Project name\" "
	},
	"PROJECT (2)":{
		"description":"Obtains the default project\n\t\tCan be also used from within programs",
		"parameters":"PROJECT OUT PJ$ "
	},
	"BACKTRACE":{
		"description":"Displays the history of previous callers\n\t\t- DIRECT mode only\n\t\t- When execution has been stopped, for example with the STOP instruction, the caller history up to the point just before it was stopped will be displayed\n\t\t- A list of slot numbers and line numbers will be displayed",
		"parameters":"BACKTRACE"
	},
	"=":{
		"description":"Assigns a value or expression to a variable\n\t\t- A simplified notation of the LET instruction used in conventional BASIC\n\t\t- In this software, the LET instruction itself is omitted; only '=' should be used for assignment",
		"parameters":"="
	},
	"DIM (1)":{
		"description":"Declares arrays to use\n\t\t- In this product, arrays must always be declared\n\t\t- The subscript should begin with 0\n\t\t- The number of elements must be enclosed in []. () is not allowed\n\t\t- Either DIM or VAR can be used",
		"parameters":"DIM Array variable name[ Number of elements ] ,…"
	},
	"DIM (2)":{
		"description":"Declares variables to use\n\t\t- When OPTION STRICT is specified, each variable that will be used must be declared\n\t\t- Usage where DIM is used for variable definition",
		"parameters":"DIM Variable name ,…"
	},
	"VAR (1)":{
		"description":"Declares variables to use\n\t\tWhen OPTION STRICT is specified, each variable that will be used must be declared",
		"parameters":"VAR Variable name ,…"
	},
	"VAR (2)":{
		"description":"Declares arrays to use\n\t\t- In this product, arrays must always be declared\n\t\t- The subscript should begin with 0\n\t\t- The number of elements must be enclosed in []. () is not allowed\n\t\t- Either DIM or VAR can be used",
		"parameters":"VAR Array variable name[ Number of elements ] ,…"
	},
	"SWAP":{
		"description":"Swaps the values of two variables\n\t\tReplacing a character string with a numerical value, or vice versa, is not allowed",
		"parameters":"SWAP Variable 1, Variable 2"
	},
	"INC":{
		"description":"Increments the value of a variable by +1\n\t\tIf the Expression argument is specified, the value of the expression will be added",
		"parameters":"INC Variable [, Expression ]"
	},
	"DEC":{
		"description":"Decrements the value of a variable by -1\n\t\tIf the Expression argument is specified, the value of the expression will be subtracted",
		"parameters":"DEC Variable [, Expression ]"
	},
	"COPY (1)":{
		"description":"Copies one array to another array\n\t\t- For one-dimensional arrays only, if the number of elements in the copy destination is insufficient, the required element(s) will be added automatically\n\t\t- Both the copy source and destination ignore dimensions",
		"parameters":"COPY Copy destination array [,Copy destination offset],Copy source array [[,Copy source offset] , Number of copy elements]"
	},
	"COPY (2)":{
		"description":"Reads a DATA sequence into an array\n\t\t- The data elements enumerated in the DATA instruction will be read into the array\n\t\t- For one-dimensional arrays only, if the number of elements in the copy destination is insufficient, the required element(s) will be added automatically",
		"parameters":"COPY Copy destination array [,Copy destination offset], \"@Label string\" [,Number of copy data items] "
	},
	"SORT":{
		"description":"Sorts arrays in ascending order",
		"parameters":"SORT [Start position, Number of elements,] Array 1 [,Array 2 ,…]"
	},
	"RSORT":{
		"description":"Sorts arrays in descending order",
		"parameters":"RSORT [Start position, Number of elements,] Array 1 [,Array 2 ,…]"
	},
	"PUSH":{
		"description":"Adds an element to the end of an array (The number of elements will increase by 1)",
		"parameters":"PUSH Array, Expression"
	},
	"POP":{
		"description":"Removes an element from the end of an array (The number of elements will decrease by 1)",
		"parameters":"Variable=POP( Array )"
	},
	"UNSHIFT":{
		"description":"Adds an element to the start of an array (The number of elements will increase by 1)",
		"parameters":"UNSHIFT Array, Expression"
	},
	"SHIFT":{
		"description":"Removes an element from the start of an array (The number of elements will decrease by 1)",
		"parameters":"Variable=SHIFT( Array )"
	},
	"FILL":{
		"description":"Sets all the elements in an array to the specified value\n\t\t- Partial changes can also be made by specifying an offset and number of elements\n\t\t- You can specify any type of array, including integer, real number, or string",
		"parameters":"FILL Array, Value [,Offset [,Number of elements]]"
	},
	"@":{
		"description":"Name to indicate a program or data position\n\t\t- It is not possible to specify the line number directly with GOTO or other instructions\n\t\t- Branch destinations and data positions must be all specified using labels",
		"parameters":"@Label name"
	},
	"GOTO (1)":{
		"description":"Forces branching",
		"parameters":"GOTO @Label "
	},
	"GOSUB (1)":{
		"description":"Calls a sub-routine",
		"parameters":"GOSUB @Label "
	},
	"RETURN (1)":{
		"description":"Returns from a sub-routine to the caller",
		"parameters":"RETURN "
	},
	"RETURN (2)":{
		"description":"Returns a value from a sub-routine while returning to the caller\n\t\tUsed to return values in a DEF instruction defined as function type",
		"parameters":"RETURN "
	},
	"OUT":{
		"description":"Instruction used when multiple outputs are required\n\t\t- Used to declare a DEF instruction that returns multiple values\n\t\t- Also used in built-in instructions that return multiple values",
		"parameters":"OUT"
	},
	"ON (1)":{
		"description":"Branches to a label line according to the control variable value\n\t\t- The branch number begins with 0, unlike in conventional BASIC",
		"parameters":"ON Control variable GOTO @Label 0, @Label 1…"
	},
	"GOTO (2)":{
		"description":"Branches to a label line according to the control variable value\n\t\t- The branch number begins with 0, unlike in conventional BASIC",
		"parameters":"ON Control variable GOTO @Label 0, @Label 1…"
	},
	"ON (2)":{
		"description":"Calls a sub-routine according to a control variable value\n\t\t- The branch number begins with 0, unlike in conventional BASIC",
		"parameters":"ON Control variable GOSUB @Label 0, @Label 1…"
	},
	"GOSUB (2)":{
		"description":"Calls a sub-routine according to the control variable value\n\t\t- The branch number begins with 0, unlike in conventional BASIC",
		"parameters":"ON Control variable GOSUB @Label 0, @Label 1…"
	},
	"IF (1)":{
		"description":"Executes Process 1 if the condition is satisfied, or Process 2 if the condition is not satisfied\n\t\t- GOTO can be omitted immediately after THEN or ELSE\n\t\t- ENDIF should be used when the process spans multiple lines",
		"parameters":"IF Conditional expression THEN Process to execute when the condition is satisfied [ELSE Process to execute when the condition is not satisfied] [ENDIF]"
	},
	"THEN":{
		"description":"Control destination if the IF condition is satisfied\n\t\tSee Comment for IF for details regarding conditional evaluation",
		"parameters":"IF Conditional expression THEN Process to execute when the condition is satisfied [ELSE Process to execute when the condition is not satisfied] [ENDIF]"
	},
	"ELSE":{
		"description":"Control destination if the IF condition is not satisfied\n\t\tSee Comment for IF for details regarding conditional evaluation",
		"parameters":"IF Conditional expression THEN Process to execute when the condition is satisfied ELSE Process to execute when the condition is not satisfied [ENDIF]"
	},
	"ELSEIF":{
		"description":"Additional conditional evaluation if the IF condition is not satisfied\n\t\t- Used to evaluate another condition if the IF condition is not satisfied\n\t\t- See Comment for IF for details regarding conditional evaluation",
		"parameters":"IF Conditional expression THEN Process to execute when the condition is satisfied ELSEIF Conditional expression THEN Process to execute when the condition is satisfied ENDIF"
	},
	"ENDIF":{
		"description":"Ends if processing spans multiple lines after control switching with IF\n\t\tSee Comment for IF for details regarding conditional evaluation",
		"parameters":"IF Conditional expression THEN Process to execute when the condition is satisfied ELSE Process to execute when the condition is not satisfied [ENDIF]"
	},
	"IF (2)":{
		"description":"Branches to @Label if the condition is satisfied\n\t\tSee Comment for IF for details regarding conditional evaluation",
		"parameters":"IF Conditional expression GOTO @Label [ELSE Process to execute when the condition is not satisfied]"
	},
	"GOTO (3)":{
		"description":"Branches to @Label if the condition is satisfied\n\t\t- See Comment for IF for details regarding conditional evaluation",
		"parameters":"IF Conditional expression GOTO @Label [ELSE Process to execute when the condition is not satisfied]"
	},
	"FOR":{
		"description":"Repeats the process for the specified number of times\n\t\t- The NEXT instruction should be placed at the end of the process\n\t\t- If the condition is not satisfied, the process may not be executed at all",
		"parameters":"FOR Loop variable=Initial value TO End value [STEP Increment]"
	},
	"TO":{
		"description":"Specifies the loop count end value\n\t\t- See Comment for the FOR instruction for details regarding FOR to NEXT",
		"parameters":"TO End value"
	},
	"STEP":{
		"description":"Specifies the increment value for a FOR loop count\n\t\t- See Comment for the FOR instruction for details regarding FOR to NEXT",
		"parameters":"STEP Increment"
	},
	"NEXT":{
		"description":"Instruction that indicates the end of a FOR loop\n\t\t- See Comment for the FOR instruction for details regarding FOR to NEXT\n\t\t- Using NEXT with IF in a FOR loop is not recommended\n\t\t- Use CONTINUE to exit the loop before the end",
		"parameters":"NEXT [ Control variable ]"
	},
	"WHILE":{
		"description":"Repeats the process up to WEND while the condition is satisfied\n\t\t- Exits the loop if the condition is not satisfied or when the BREAK instruction is executed",
		"parameters":"WHILE Conditional expression"
	},
	"WEND":{
		"description":"Instruction that indicates the end of a WHILE loop",
		"parameters":"WEND"
	},
	"REPEAT":{
		"description":"Instruction for starting a REPEAT loop\n\t\t- The UNTIL instruction and a conditional expression should be placed at the end of the loop\n\t\t- Unlike the WHILE instruction, this executes the process before determining the condition\n\t\t- Exits the loop when the condition is satisfied or when the BREAK instruction is executed",
		"parameters":"REPEAT"
	},
	"UNTIL":{
		"description":"Repeats the process from REPEAT until the conditional expression is satisfied\n\t\t- The REPEAT instruction should be placed at the beginning of the loop\n\t\t- Unlike the WHILE instruction, this executes the process before determining the condition\n\t\t- Exits the loop if the condition is satisfied or when the BREAK instruction is executed",
		"parameters":"UNTIL conditional expression"
	},
	"CONTINUE":{
		"description":"Forces a loop to proceed\n\t\t- Used in FOR ... NEXT, WHILE ... WEND, REPEAT ... UNTIL",
		"parameters":"CONTINUE"
	},
	"BREAK":{
		"description":"Forces a loop to end\n\t\t- Used in FOR ... NEXT, WHILE ... WEND, REPEAT ... UNTIL",
		"parameters":"BREAK"
	},
	"END (1)":{
		"description":"Exits the program",
		"parameters":"END "
	},
	"END (2)":{
		"description":"Exits a DEF definition for a user function or user instruction.",
		"parameters":"END "
	},
	"STOP":{
		"description":"Suspends a running program\n\t\t- The program SLOT:line number of the suspended program will be displayed\n\t\t- The program can be resumed with the CONT instruction (However, resuming is not available in certain situations)",
		"parameters":"STOP"
	},
	"DEF (1)":{
		"description":"About DEF user-defined instructions\n\t\t1) USER (No arguments; no return values)\n\t\t2) A=USER(X) (With argument; single return value)\n\t\t3) USER(X) OUT A,B (With argument; multiple return values)\n\t\t\n\t\tUsing DEF allows you to define unique instructions as shown above",
		"parameters":"DEF definition name "
	},
	"DEF (3)":{
		"description":"Defines a user function with a single return value",
		"parameters":"DEF Function name([Argument [,Argument…]) "
	},
	"DEF (4)":{
		"description":"Defines a user instruction with multiple return values",
		"parameters":"DEF Instruction name [Argument [,Argument…]] [OUT V1 [,V2…]]"
	},
	"COMMON":{
		"description":"1) COMMON DEF USER\n\t\t2) COMMON DEF USER(X)\n\t\t3) COMMON DEF USER(X) OUT A,B\n\t\t\n\t\tCOMMON can be used when a unique instruction is used from a different SLOT\n\t\tUSE is required if a program is used between different SLOTs",
		"parameters":"CALL \"Instruction name\" [,Argument…] [OUT Variable 1 [,Variable 2…]] "
	},
	"CALL (2)":{
		"description":"Calls the user-defined function with the specified name",
		"parameters":"Variable=CALL(\"Function name\" [,Argument…]) "
	},
	"CALL (3)":{
		"description":"Calls a sprite callbackProcesses which have been specified for each sprite using SPFUNC are called together",
		"parameters":"CALL SPRITE"
	},
	"CALL (4)":{
		"description":"Calls a BG callbackProcesses which have been specified for each sprite using SPFUNC are called together",
		"parameters":"CALL BG"
	},
	"XON":{
		"description":"Declares the use of a special feature- These features are not available unless their use is declared beforehand\n\t\t- When XON EXPAD is successful, RESULT will be returned as TRUE.\n\t\t- If the system is already in the XON state, this command will not display a dialog",
		"parameters":"XON Name of feature to use"
	},
	"XOFF":{
		"description":"Stops using a special feature declared with XON",
		"parameters":"XOFF Name of the feature to stop"
	},
	"READ":{
		"description":"Reads the information enumerated with the DATA instruction into the variablesInformation should be read in the same type as that enumerated with the DATA instruction",
		"parameters":"READ Acquisition variable 1 [, Acquisition variable 2…]"
	},
	"DATA":{
		"description":"Defines data to read with READ\n\t\t-Numerical values and character strings can be mixed\n\t\t- Expressions containing only numerical constants are handled as constants, and so can be written in DATA statements\n\t\t- Constants starting with # are also allowed\n\t\t- Expressions where &amp;&amp;, ||, variables, and functions are mixed are not allowed\n\t\t- Character string expressions are not allowed",
		"parameters":"DATA Data [, Data…]"
	},
	"RESTORE":{
		"description":"Specifies the first DATA to read with the READ instruction",
		"parameters":"RESTORE @Label"
	},
	"OPTION":{
		"description":"Sets the operating mode of the program",
		"parameters":"OPTION Feature name"
	},
	"WAIT":{
		"description":"Stops the program until the specified number of vertically synchronized frames has been reached",
		"parameters":"WAIT [Number of frames]"
	},
	"VSYNC":{
		"description":"Stops the program until the specified number of vertically synchronized frames has been reachedUnlike WAIT, the VSYNC count starts from the last VSYNC",
		"parameters":"VSYNC [Number of frames]"
	},
	"'":{
		"description":"Symbols for writing comments\n\t\t- Comments do not affect program execution",
		"parameters":"' [String]"
	},
	"REM":{
		"description":"Instructions for writing comments\n\t\t- Comments do not affect program execution",
		"parameters":"REM [Character string]"
	},
	"KEY":{
		"description":"Assigns an arbitrary character string to a function key",
		"parameters":"KEY Number,\"Character string\""
	},
	"TMREAD":{
		"description":"Converts a time string to numerical values",
		"parameters":"TMREAD [\"Time string\"] OUT H,M,S"
	},
	"DTREAD":{
		"description":"Converts a date string to numerical values",
		"parameters":"DTREAD [\"Date string\"] OUT Y,M,D [,W]"
	},
	"CHKLABEL":{
		"description":"Checks if there is a label that can be referenced with the specified string",
		"parameters":"Variable = CHKLABEL(\"@Label string\"[,Flag])"
	},
	"CHKCALL":{
		"description":"Checks if there is an instruction or function that can be referenced with the specified string",
		"parameters":"Variable = CHKCALL(\"Character string\")"
	},
	"CHKVAR":{
		"description":"Checks if there is a variable that can be referenced with the specified string",
		"parameters":"Variable = CHKVAR(\"Character string\")"
	},
	"DIALOG (1)":{
		"description":"Displays a dialog and waits for a button to be pressed\n\t\t- The result is returned with the system variable RESULT\n\t\t- RESULT: 1 (Confirmed), -1 (Canceled), 0 (Time out)",
		"parameters":"DIALOG \"Text string\" "
	},
	"DIALOG (2)":{
		"description":"Displays a dialog and waits for a button to be pressed",
		"parameters":"DIALOG \"Text string\",[Selection type],[\"Caption string\"],[Timeout period]"
	},
	"DIALOG (3)":{
		"description":"Displays a dialog and waits for the specified button to be pressed",
		"parameters":"Variable = DIALOG(\"Text string\",[Selection type],[\"Caption string\"],[Timeout period])"
	},
	"DIALOG (4)":{
		"description":"Displays a dialog and waits for the Touch Screen or a hardware button to be pressed",
		"parameters":"Variable = DIALOG(\"Text string\",Button type,[\"Caption string\"],[Timeout period])"
	},
	"DIALOG (5)":{
		"description":"Displays a dialog used only for inputting file names",
		"parameters":"String=DIALOG( \"Initial string\", \"Caption string\" [,Maximum characters]) "
	},
	"DIALOG (6)":{
		"description":"Displaying special characters in DIALOG\n\t\tTo use special character and symbols, pass the character code in the UTF-16 format to CHR$\n\t\t* For details on the UTF-16 format, please refer to a technical book or similar resource.",
		"parameters":"CLS"
	},
	"COLOR":{
		"description":"Specifies the display colors for the console screen\n\t\tConstants for text colors are available (#TBLACK to #TWHITE)",
		"parameters":"COLOR Drawing color [,Background color]"
	},
	"LOCATE":{
		"description":"Specifies the character display location on the console screen",
		"parameters":"LOCATE [X-coordinate],[Y-coordinate] [,Z-coordinate]"
	},
	"PRINT":{
		"description":"Displays characters on the console screen\n\t\t- Omitting expressions causes only a line break to occur\n\t\t- ? can be used instead of PRINT",
		"parameters":"PRINT [Expression [; or, Expression…]]"
	},
	"ATTR":{
		"description":"Sets the rotation/inversion attributes of the characters to display on the console screen\n\t\tConstants for text attributes are available (#TROT0-270, #TREVH,V)",
		"parameters":"ATTR Display attribute"
	},
	"SCROLL":{
		"description":"Adjusts the display location of the whole console screen\n\t\t- Can give the impression of a moving view point (characters will move in the opposite direction)\n\t\t- Characters pushed out of the screen will disappear",
		"parameters":"SCROLL Number of characters X, Number of characters Y"
	},
	"CHKCHR":{
		"description":"Checks the character code of a character on the console screen",
		"parameters":"Variable = CHKCHR( X-coordinate,Y-coordinate )"
	},
	"INPUT":{
		"description":"Inputs numerical values or character strings from the keyboard\n\t\t- Waits for input until the ENTER key is input\n\t\t- If the number of input items is insufficient, \"?Redo from start\" will be displayed for re-input",
		"parameters":"INPUT [\"Guiding text string\";] Variable[,Variable 2…]"
	},
	"LINPUT":{
		"description":"Gets a character string input from the keyboard\n\t\t- Also accepts \",\" and other characters that the INPUT instruction does not allow\n\t\t- Waits for input until the ENTER key is input",
		"parameters":"LINPUT [\"Guiding text string\";] String variable"
	},
	"INKEY$":{
		"description":"Gets a character input from the keyboard (without waiting for input)",
		"parameters":"String variable=INKEY$()"
	},
	"FONTDEF (1)":{
		"description":"Defines a font for the specified character code",
		"parameters":"FONTDEF Character code, \"Font definition string\""
	},
	"FONTDEF (2)":{
		"description":"Defines a font for the specified character code",
		"parameters":"FONTDEF Character code, Numerical value array "
	},
	"FONTDEF (3)":{
		"description":"Resets the font definition to its initial state",
		"parameters":"FONTDEF "
	},
	"WIDTH":{
		"description":"Changes the console character sizes\n\t\t- Only enlarges the characters, does not display a smooth zoomed-in view\n\t\t- This is an auxiliary function for people who have trouble viewing small characters",
		"parameters":"WIDTH Font size"
	},
	"BUTTON":{
		"description":"Gets the status of hardware buttons\n\t\tConstants for buttons are available for return values",
		"parameters":"Variable=BUTTON( [Feature ID [,Terminal ID]] )"
	},
	"BREPEAT":{
		"description":"Sets the key repeat feature\n\t\t- Omitting Start time and Interval will turn off repeat\n\t\t- Management numbers differ from the bit values that correspond to each button in BUTTON\n\t\t- ZR and ZL buttons are available only when Circle Pad Pro is used",
		"parameters":"BREPEAT Button ID, Start time, Interval"
	},
	"STICK":{
		"description":"Gets information on the Circle Pad",
		"parameters":"STICK [Terminal ID] OUT X,Y"
	},
	"STICKEX":{
		"description":"Gets information on the Circle Pad Pro stick\n\t\tCircle Pad Pro should be enabled beforehand with XON EXPAD",
		"parameters":"STICKEX [Terminal ID] OUT X,Y"
	},
	"ACCEL":{
		"description":"Gets information on acceleration\n\t\t- The motion sensor should be enabled beforehand with XON MOTION\n\t\t- Note that this instruction will continue to detect 1G acceleration in the gravity direction\n\t\t- This is useful when operation is performed while tilting",
		"parameters":"ACCEL OUT X,Y,Z"
	},
	"GYROV":{
		"description":"Gets information on the angular velocity of the gyro sensor\n\t\tMotion sensor(s) should be enabled beforehand with XON MOTION",
		"parameters":"GYROV OUT P,R,Y"
	},
	"GYROA":{
		"description":"Gets information on the angle of the gyro sensor\n\t\tMotion sensor(s) should be enabled beforehand with XON MOTION",
		"parameters":"GYROA OUT P,R,Y"
	},
	"GYROSYNC":{
		"description":"Updates gyro information\n\t\t- Error accumulation may occur if gyro information is repeatedly retrieved\n\t\t- This instruction should be called to reset information appropriately\n\t\t- However, calling this instruction at an interval of 1 frame or less is prohibited",
		"parameters":"GYROSYNC"
	},
	"TOUCH":{
		"description":"Gets touch information\n\t\tThe 5 pixels around the edge of the screen cannot be read",
		"parameters":"TOUCH [Terminal ID] OUT STTM,TX,TY"
	},
	"MICSTART":{
		"description":"Starts sampling from the microphone\n\t\t- The microphone should be enabled beforehand with XON MIC\n\t\t- Recorded into memory used for sampling in the system",
		"parameters":"MICSTART Sampling rate, Number of bits, Number of seconds"
	},
	"MICSTOP":{
		"description":"Stops sampling from the microphone",
		"parameters":"MICSTOP"
	},
	"MICDATA":{
		"description":"Gets data from the microphone\n\t\tThis returns sampling data from the specified position",
		"parameters":"Variable=MICDATA( Acquisition position )"
	},
	"MICSAVE":{
		"description":"Copies data from the internal sampling memory to an array",
		"parameters":"MICSAVE [[Acquisition position,] Number of samples to get,] Array name "
	},
	"FILES (1)":{
		"description":"Displays a file list on the console",
		"parameters":"FILES [\"File type\"] "
	},
	"FILES (2)":{
		"description":"Gets a file list and stores it in an array",
		"parameters":"FILES [\"File type\",] String array "
	},
	"LOAD (1)":{
		"description":"Loads a file\n\t\t- A confirmation dialog will be displayed\n\t\t- It is impossible to load a program into the same program SLOT as a running program",
		"parameters":"LOAD \"[Resource name:]File name\"[,Dialog display flag] "
	},
	"LOAD (2)":{
		"description":"Loads a text file into a string variable",
		"parameters":"LOAD \"TXT:File name\"[,Dialog display flag] OUT TX$ "
	},
	"LOAD (3)":{
		"description":"Loads a text file into a string variable",
		"parameters":"String variable = LOAD(\"TXT:File name\" [,Dialog display flag]) "
	},
	"LOAD (4)":{
		"description":"Loads a binary file into a numerical value array",
		"parameters":"LOAD \"DAT:File name\", Numerical value array[,Dialog display flag] "
	},
	"SAVE (1)":{
		"description":"Saves a file\n\t\t- When run, a confirmation dialog will be displayed\n\t\t- The confirmation dialog for SAVE cannot be hidden",
		"parameters":"SAVE \"[Resource name:]File name\" "
	},
	"SAVE (2)":{
		"description":"Saves a string variable to a text file",
		"parameters":"SAVE \"TXT:File name\", String variable "
	},
	"SAVE (3)":{
		"description":"Saves a numerical value array to a binary file",
		"parameters":"SAVE \"DAT:File name\", Numerical value array "
	},
	"RENAME":{
		"description":"Changes a file name\n\t\tWhen run, a confirmation dialog will be displayed",
		"parameters":"RENAME \"[File type:]File name\", \"[File type:]New name\""
	},
	"DELETE":{
		"description":"Deletes a file\n\t\tWhen run, a confirmation dialog will be displayed",
		"parameters":"DELETE \"[File type:]File name\""
	},
	"EXEC (1)":{
		"description":"Loads and executes a program\n\t\t- It is impossible to return from a program started with EXEC to the previous program\n\t\t- It is possible to return by using END in a program started with EXEC in another SLOT\n\t\t- This cannot be used to run a program in DIRECT mode",
		"parameters":"EXEC \"[Resource name:]File name\" "
	},
	"EXEC (2)":{
		"description":"Executes a program in a different SLOT\n\t\t- It is impossible to return from a program executed with EXEC to the previous program\n\t\t- It is possible to return by using END in a program started with EXEC in another SLOT\n\t\t- This cannot be used to run a program in DIRECT mode",
		"parameters":"EXEC Program SLOT "
	},
	"USE":{
		"description":"Makes a program in the specified program SLOT executable",
		"parameters":"USE Program SLOT"
	},
	"CHKFILE":{
		"description":"Checks if the specified file exists",
		"parameters":"Variable = CHKFILE(\"[File type:]File name\")"
	},
	"MPSTART":{
		"description":"Starts a wireless communication session\n\t\t- Connection to a session is allowed when MPSTART identifiers are equal\n\t\t- The RESULT system variable should be used to get information on whether or not a session has successfully been established\n\t\t- Communication will be terminated if the system goes into sleep mode",
		"parameters":"MPSTART Maximum number of connected users, \"Communication identifier string\""
	},
	"MPEND":{
		"description":"Ends a wireless communication session\n\t\t- All participants close the session synchronously\n\t\t- A wait dialog will be displayed",
		"parameters":"MPEND"
	},
	"MPSEND":{
		"description":"Sends data to all participants in a wireless communication session\n\t\t- Delivery of sent data is guaranteed, but with a delay\n\t\t- A large number of MPSEND calls in a short period will result in an error\n\t\t&nbsp;&nbsp;* Communication buffer overflow\n\t\t- Communication will be terminated if the system goes into sleep mode",
		"parameters":"MPSEND \"Character string to send\""
	},
	"MPRECV":{
		"description":"Receives data from MPSEND\n\t\t- If there is no data to receive, the sender ID will contain the value -1\n\t\t- Communication will be terminated if the system goes into sleep mode",
		"parameters":"MPRECV OUT SID,RCV$"
	},
	"MPSTAT":{
		"description":"Gets the connection status of a specified terminal in a wireless communication session\n\t\tCommunication will be terminated if the system goes into sleep mode",
		"parameters":"Variable = MPSTAT( [Terminal ID] )"
	},
	"MPNAME$":{
		"description":"Gets the terminal name of a specified terminal in a wireless communication session\n\t\tCommunication will be terminated if the system goes into sleep mode",
		"parameters":"String variable = MPNAME$( Terminal ID )"
	},
	"MPGET":{
		"description":"Gets user-defined data from a specified terminal in a wireless communication session\n\t\tCommunication will be terminated if the system goes into sleep mode",
		"parameters":"Variable=MPGET( Terminal ID, Internal management number )"
	},
	"MPSET":{
		"description":"Writes to user-defined data in a wireless communication session\n\t\tCommunication will be terminated if the system goes into sleep mode",
		"parameters":"MPSET Internal management number, Numerical value"
	},
	"XSCREEN":{
		"description":"Sets a screen mode\n\t\t- Screen modes 2 and 3 can also be used in DIRECT mode, but \n\tthe Touch Screen will be switched to a keyboard after execution is started\n\t\t- 3D specification can be disabled in the Parental Control settings",
		"parameters":"XSCREEN Screen mode [,Number of sprite assignments ,Number of BG assignments]"
	},
	"DISPLAY (1)":{
		"description":"Selects the screen to manipulate (Upper or Touch)\n\t\t- DISPLAY 1 can be specified when XSCREEN 2 or 3 is used\n\t\t-This command cannot be directly executed in DIRECT mode.",
		"parameters":"DISPLAY Screen ID "
	},
	"DISPLAY (2)":{
		"description":"Gets the Screen ID that is currently being used\n\t\t- DISPLAY 1 can be specified when XSCREEN 2 or 3 is used\n\t\t- This command cannot be directly executed in DIRECT mode.",
		"parameters":"Variable=DISPLAY() "
	},
	"VISIBLE":{
		"description":"Switches screen display elements ON/OFF",
		"parameters":"VISIBLE Console,Graphic,BG,sprite"
	},
	"BACKCOLOR (1)":{
		"description":"Specifies a background color",
		"parameters":"BACKCOLOR Background color code "
	},
	"BACKCOLOR (2)":{
		"description":"Specifies the current background color",
		"parameters":"Variable=BACKCOLOR() "
	},
	"ACLS":{
		"description":"Resets the draw settings to their settings when BASIC was started\n\t\t- The same operations as those shown after END in the Examples should be executed\n\t\t- Sound settings such as BGM will not be affected",
		"parameters":"ACLS"
	},
	"FADE (1)":{
		"description":"Sets the color for the screen fader\n\t\t- The fader is always displayed in the front\n\t\t- The entire screen is filled with the fading color (taking the transparent color into consideration)",
		"parameters":"FADE Fading color [,Fading time] "
	},
	"FADE (2)":{
		"description":"Gets the current screen fader color",
		"parameters":"Value=FADE() "
	},
	"FADECHK":{
		"description":"Gets the state of the fading animation",
		"parameters":"Variable=FADECHK()"
	},
	"GPAGE (1)":{
		"description":"Specifies a page for graphic display and a page for manipulation",
		"parameters":"GPAGE Display page, Manipulation page "
	},
	"GPAGE (2)":{
		"description":"Gets information on the graphic page currently set",
		"parameters":"GPAGE OUT VP,WP "
	},
	"GCOLOR (1)":{
		"description":"Specifies the graphic draw color",
		"parameters":"GCOLOR Color code "
	},
	"GCOLOR (2)":{
		"description":"Specifies the graphic draw color",
		"parameters":"GCOLOR OUT C32 "
	},
	"RGB":{
		"description":"Gets a color code based on 8-bit RGB values\n\t\t- Black RGB(0,0,0)\n\t\t- White RGB(255,255,255)\n\t\t- Light gray RGB(224,224,224)\n\t\t- Gray RGB(128,128,128)\n\t\t- Dark gray RGB(64,64,64)\n\t\t- Red RGB(255,0,0)\n\t\t- Pink RGB(255,96,208)\n\t\t- Purple RGB(160,32,255)\n\t\t- Light blue RGB(80,208,255)\n\t\t- Blue RGB(0,32,255)\n\t\t- Yellow green RGB(96,255,128)\n\t\t- Green RGB(0,192,0)\n\t\t- Yellow RGB(255,224,32)\n\t\t- Orange RGB(255,160,16)\n\t\t- Brown RGB(160,128,96)\n\t\t- Pale pink RGB(255,208,160)",
		"parameters":"Variable = RGB( [Transparency,] Red,Green,Blue )"
	},
	"RGBREAD":{
		"description":"Gets each RGB element from a color code",
		"parameters":"RGBREAD Color code OUT [A,] R,G,B"
	},
	"GCLIP":{
		"description":"Specifies a clipping area on the graphic screen\n\t\t- When the range is omitted in display mode, the whole screen will be clipped\n\t\t- When the range is omitted in write mode, the whole graphic page is assumed",
		"parameters":"GCLIP Clip mode [,Start point X,Start point Y,End point X, End point Y]"
	},
	"GPRIO":{
		"description":"Changes the display order of the graphic screen\n\t\tIf 3D mode is used, the whole graphic screen will be affected",
		"parameters":"GPRIO Z-coordinate"
	},
	"GCLS":{
		"description":"Clears the graphic screen\n\t\t- Instruction to fill the whole screen with black\n\t\t- It is also possible to specify a color code with which to fill the screen",
		"parameters":"GCLS [ Color code ]"
	},
	"GSPOIT":{
		"description":"Gets a color from the specified coordinates on the graphic screen\n\t\tThe return value may not be the same as the value specified at the time of drawing \n\tbecause it has passed through the internal color representation",
		"parameters":"Variable = GSPOIT( X-coordinate,Y-coordinate )"
	},
	"GPSET":{
		"description":"Puts a pixel on the graphic screen",
		"parameters":"GPSET X-coordinate,Y-coordinate [,Color code ]"
	},
	"GLINE":{
		"description":"Draws a straight line on the graphic screen",
		"parameters":"GLINE Start point X,Start point Y, End point X,End point Y [,Color code ]"
	},
	"GCIRCLE (1)":{
		"description":"Draws a circle on the graphic screen",
		"parameters":"GCIRCLE Center point X,Center point Y, Radius [,Color code ] "
	},
	"GCIRCLE (2)":{
		"description":"Draws an arc on the graphic screen",
		"parameters":"GCIRCLE Center point X, Center point Y, Radius, Start angle, End angle [ Flag [ Color code ]] "
	},
	"GBOX":{
		"description":"Draws a quadrangle on the graphic screen",
		"parameters":"GBOX Start point X,Start point Y, End point X,End point Y [,Color code]"
	},
	"GFILL":{
		"description":"Draws a quadrangle on the graphic screen and fills it with a color",
		"parameters":"GFILL Start point X,Start point Y, End point X,End point Y [,Color code]"
	},
	"GPAINT":{
		"description":"Fills the graphic screen with color\n\t\tIf the border color is omitted, the color range at the start point coordinates will be used",
		"parameters":"GPAINT Start point X, Start point Y [ ,Fill Color [, Border color ] ]"
	},
	"GCOPY":{
		"description":"Copies an image from another graphic page",
		"parameters":"GCOPY [Transfer source page,] Start point X,Start point Y, End point X,End point Y, Transfer destination X,Transfer destination Y, Copy mode"
	},
	"GSAVE":{
		"description":"Copies an image (whole screen) to an array",
		"parameters":"GSAVE [Transfer source page,] [X,Y,Width,Height,] Transfer destination array, Color conversion flag"
	},
	"GLOAD (1)":{
		"description":"Copies image data from an array to the graphic screen",
		"parameters":"GLOAD [X,Y,Width,Height,] Image array,Color conversion flag,Copy mode "
	},
	"GLOAD (2)":{
		"description":"Copies image data from an array to the graphic screen\n\t\tColors will be handled as index colors from palettes",
		"parameters":"GLOAD [X,Y,Width,Height,] Image array,Palette array,Copy mode "
	},
	"GTRI":{
		"description":"Draws a triangle on the graphic screen and fills it with a color",
		"parameters":"GTRI X1,Y1, X2,Y2, X3,Y3 [,Color code]"
	},
	"GPUTCHR (1)":{
		"description":"Draws a character string on the graphic screen",
		"parameters":"GPUTCHR X,Y, \"String\" [,Scale X,Scale Y][,Color code] "
	},
	"GPUTCHR (2)":{
		"description":"Draws a character on the graphic screen",
		"parameters":"GPUTCHR X,Y, Character code [,Scale X,Scale Y][,Color code] "
	},
	"SPPAGE (1)":{
		"description":"Sets a graphic page to assign to sprites",
		"parameters":"SPPAGE Graphic page "
	},
	"SPPAGE (2)":{
		"description":"Gets the graphic page that has been assigned to sprites",
		"parameters":"Variable=SPPAGE() "
	},
	"SPCLIP":{
		"description":"Specifies a clipping area in the sprite\n\t\t- If the range is omitted, the whole screen will be assumed",
		"parameters":"SPCLIP [Start point X,Start point Y,End point X, End point Y]"
	},
	"SPDEF (1)":{
		"description":"Resets the sprite character definition template to its initial state",
		"parameters":"SPDEF"
	},
	"SPDEF (2)":{
		"description":"Creates a template for sprite character definition",
		"parameters":"SPDEF Definition number, U,V [,W,H [,Origin X,Origin Y]] [,Attribute]"
	},
	"SPDEF (3)":{
		"description":"Creates templates for sprite character definition collectively from an array",
		"parameters":"SPDEF Numerical value array "
	},
	"SPDEF (4)":{
		"description":"Creates templates for sprite character definition collectively from a DATA sequence",
		"parameters":"SPDEF \"@Label string\" "
	},
	"SPDEF (5)":{
		"description":"Gets information on a sprite character definition template",
		"parameters":"SPDEF Definition number OUT U,V [,W,H [,HX,HY]] [,A] "
	},
	"SPDEF (6)":{
		"description":"Copies a template for sprite character definition\n\t\t- Unnecessary elements can be omitted (Separating commas (',') are required)\n\t\t- Arguments are used to adjust the copied template",
		"parameters":"SPDEF Definition number,Source definition number,[U],[V],[W],[H],[Origin X],[Origin Y],[Attribute] "
	},
	"SPSET (1)":{
		"description":"Creates a sprite (using a definition template)\n\t\t- SPSET makes a sprite available for use\n\t\t- Executing SPSET will initialize rotation and all other information\n\t\t- All values of SPVAR will be 0\n\t\t- When any SPHIT instruction for collision detection is to be used, SPCOL should be called after SPSET",
		"parameters":"SPSET Management number,Definition number "
	},
	"SPSET (2)":{
		"description":"Creates a sprite (using image and other information specified directly)\n\t\tCan be used to set a sprite separately without using the values from SPDEF\n\t\t- SPSET makes a sprite available for use\n\t\t- Executing SPSET will initialize rotation and all other information\n\t\t- All values of SPVAR will be 0\n\t\t- When any SPHIT instruction for collision detection is to be used, SPCOL should be called after SPSET",
		"parameters":"SPSET Management number ,U,V [,W,H] ,Attribute "
	},
	"SPSET (3)":{
		"description":"Finds an available sprite number and creates a sprite (using a definition template)\n\t\tFinds an available sprite number from the whole range\n\t\t- SPSET makes a sprite available for use\n\t\t- Executing SPSET will initialize rotation and all other information\n\t\t- All values of SPVAR will be 0\n\t\t- When any SPHIT instruction for collision detection is to be used, SPCOL should be called after SPSET",
		"parameters":"SPSET Definition number OUT IX"
	},
	"SPSET (4)":{
		"description":"Finds an available sprite number and creates a sprite (using image and other information specified directly)Finds an available sprite number from the whole range\n\t\t- SPSET makes a sprite available for use\n\t\t- Executing SPSET will initialize rotation and all other information\n\t\t- All values of SPVAR will be 0\n\t\t- When any SPHIT instruction for collision detection is to be used, SPCOL should be called after SPSET",
		"parameters":"SPSET U,V,W,H,Attribute OUT IX"
	},
	"SPSET (5)":{
		"description":"Finds an available sprite number in a certain range and creates a sprite (using a definition template)\n\t\tFinds an available number in the specified range\n\t\t- SPSET makes a sprite available for use\n\t\t- Executing SPSET will initialize rotation and all other information\n\t\t- All values of SPVAR will be 0\n\t\t- When any SPHIT instruction for collision detection is to be used, SPCOL should be called after SPSET",
		"parameters":"SPSET Upper limit,Lower limit, Definition number OUT IX "
	},
	"SPSET (6)":{
		"description":"Finds an available sprite number in a certain range and creates a sprite (using image and other information specified directly)\n\t\tFinds an available number in the specified range\n\t\t- SPSET makes a sprite available for use\n\t\t- Executing SPSET will initialize rotation and all other information\n\t\t- All values of SPVAR will be 0\n\t\t- When any SPHIT instruction for collision detection is to be used, SPCOL should be called after SPSET",
		"parameters":"SPSET Upper limit,Lower limit, U,V,W,H,Attribute OUT IX "
	},
	"SPCLR":{
		"description":"Stops using the specified sprite and releases the memory\n\t\tIf memory is not released after use with sprites, there will be no available memory for SPSET",
		"parameters":"SPCLR Management number"
	},
	"SPSHOW":{
		"description":"Starts displaying a sprite\n\t\tIf used before SPSET, an error will occur",
		"parameters":"SPSHOW Management number"
	},
	"SPHIDE":{
		"description":"Hides a sprite\n\t\t- This only hides the sprite; it continues to exist\n\t\t- If used before SPSET, an error will occur",
		"parameters":"SPHIDE Management number"
	},
	"SPHOME (1)":{
		"description":"Specifies the reference point (home position) for the coordinates of a sprite\n\t\t- Position reference point for the SPOFS instruction\n\t\t- Center point for rotation and scaling\n\t\t- Center coordinates for collision detection\n\t\t- If used before SPSET, an error will occur",
		"parameters":"SPHOME Management number,Position X,Position Y "
	},
	"SPHOME (2)":{
		"description":"Gets the reference point (home position) for the coordinates of a sprite\n\t\tIf used before SPSET, an error will occur",
		"parameters":"SPHOME Management number OUT HX,HY "
	},
	"SPOFS (1)":{
		"description":"Changes (moves) the coordinates of a sprite\n\t\tIf used before SPSET, an error will occur",
		"parameters":"SPOFS Management number, X, Y [,Z] "
	},
	"SPOFS (2)":{
		"description":"Gets the coordinates of a sprite\n\t\tIf used before SPSET, an error will occur",
		"parameters":"SPOFS Management number OUT X,Y[,Z] "
	},
	"SPROT (1)":{
		"description":"Specifies the rotation angle of a sprite\n\t\tIf used before SPSET, an error will occur",
		"parameters":"SPROT Management number,Angle "
	},
	"SPROT (2)":{
		"description":"Gets the rotation angle of a sprite\n\t\tIf used before SPSET, an error will occur",
		"parameters":"SPROT Management number OUT DR "
	},
	"SPROT (3)":{
		"description":"Gets the rotation angle of a sprite (Function type)\n\t\tIf used before SPSET, an error will occur",
		"parameters":"Variable=SPROT(Management number) "
	},
	"SPSCALE (1)":{
		"description":"Changes the scale (display magnification) of a sprite\n\t\t- For collision detection that takes scale into account, SPCOL should first be executedIf used before SPSET, an error will occur",
		"parameters":"SPSCALE Management number, Magnification X, Magnification Y "
	},
	"SPSCALE (2)":{
		"description":"Gets the display magnification of a sprite\n\t\tIf used before SPSET, an error will occur",
		"parameters":"SPSCALE Management number OUT SX,SY "
	},
	"SPCOLOR (1)":{
		"description":"Sets the display color of a sprite\n\t\tIf used before SPSET, an error will occur",
		"parameters":"SPCOLOR Management number, Color code "
	},
	"SPCOLOR (2)":{
		"description":"Gets the display color of a sprite\n\t\tIf used before SPSET, an error will occur",
		"parameters":"SPCOLOR Management number OUT C32 "
	},
	"SPCHR (1)":{
		"description":"Changes the character definition of a sprite (using the specified template)\n\t\tIf used before SPSET, an error will occur",
		"parameters":"SPCHR Management number, Definition number "
	},
	"SPCHR (2)":{
		"description":"Changes the character definition of a sprite (using a definition specified directly)\n\t\t- Arguments other than the management number can be omitted\n\t\t- If used before SPSET, an error will occur",
		"parameters":"SPCHR Management number,[U],[V],[W],[H],[Attribute] "
	},
	"SPCHR (3)":{
		"description":"Gets information on the character definition of a sprite\n\t\tIf used before SPSET, an error will occur",
		"parameters":"SPCHR Management number OUT U,V [,W,H [,A] ] "
	},
	"SPCHR (4)":{
		"description":"Gets the character definition number of a sprite\n\t\tIf used before SPSET, an error will occur",
		"parameters":"SPCHR Management number OUT DEFNO "
	},
	"SPLINK":{
		"description":"Links one sprite to another sprite\n\t\t- Only the coordinates will be linked (The rotation angle and magnification information will not)\n\t\t- Only a sprite with a lower management number can be specified as the link destination (parent)\n\t\t- The display coordinates of the child will be determined in relation to the parent\n\t\t- In this coordinate system, the top left corner of the screen will not be the origin\n\t\t- There are no restrictions on link hierarchies\n\t\t- If used before SPSET, an error will occur",
		"parameters":"SPLINK Management number, Link destination management number"
	},
	"SPUNLINK":{
		"description":"Unlinks a sprite\n\t\tIf used before SPSET, an error will occur",
		"parameters":"SPUNLINK Management number"
	},
	"SPANIM (1)":{
		"description":"Displays animation with a sprite (using animation data specified with an array)\n\t\tIf used before SPSET, an error will occur\n\t\t- Animation waits for a specified time, according to the value input\n\t\t- Animation starts from the frame following SPANIM execution\n\t\t- Up to 32 pieces of data will be accepted for each target element\n\t\t- If a negative value is specified for time, linear interpolation from the previous value will occur",
		"parameters":"SPANIM Management number,\"Animation target\",Data array [,Loop] "
	},
	"SPANIM (2)":{
		"description":"Displays animation with a sprite (using animation data specified with the DATA instruction)\n\t\tIf used before SPSET, an error will occur\n\t\t- Animation waits for a specified time, according to the value input\n\t\t- Animation starts from the frame following SPANIM execution\n\t\t- Up to 32 pieces of data will be accepted for each target element\n\t\t- If a negative value is specified for time, linear interpolation from the previous value will occur",
		"parameters":"SPANIM Management number,\"Animation target\",\"@Label string\" [,Loop] "
	},
	"SPANIM (3)":{
		"description":"Displays animation with a sprite (using animation data specified directly as arguments)\n\t\tIf used before SPSET, an error will occur\n\t\t- Animation waits for a specified time, according to the value input\n\t\t- Animation starts from the frame following SPANIM execution\n\t\t- Up to 32 pieces of data will be accepted for each target element\n\t\t- If a negative value is specified for time, linear interpolation from the previous value will occur",
		"parameters":"SPANIM Management number,\"Animation target\",Time 1,Item 1[,Item 2] [,Time 2,Item 1[,Item 2]]… [,Loop] "
	},
	"SPSTOP":{
		"description":"Stops animation of a sprite\n\t\tIf used before SPSET, an error will occur",
		"parameters":"SPSTOP [Management number]"
	},
	"SPSTART":{
		"description":"Starts animation of a sprite\n\t\t(If used before SPSET, an error will occur)",
		"parameters":"SPSTART [Management number]"
	},
	"SPCHK":{
		"description":"Gets the animation status of a sprite\n\t\tIf used before SPSET, an error will occur",
		"parameters":"Variable=SPCHK( Management number )"
	},
	"SPVAR (1)":{
		"description":"Writes to a sprite internal variable\n\t\t- Sprite internal variables (Each sprite has eight variables that the user can use)\n\t\t- Can also be used before SPSET (When SPSET is executed, all eight variables will be 0)",
		"parameters":"SPVAR Management number,Internal variable number,Numerical data "
	},
	"SPVAR (2)":{
		"description":"Reads a sprite internal variable (Function type)\n\t\t- Sprite internal variables (Each sprite has eight variables that the user can use)\n\t\t- Can also be used before SPSET (When SPSET is executed, all eight variables will be 0)",
		"parameters":"Variable=SPVAR( Management number,Internal variable number ) "
	},
	"SPVAR (3)":{
		"description":"Reads a sprite internal variable\n\t\t- Sprite internal variables (Each sprite has eight variables that the user can use)\n\t\t- Can also be used before SPSET (When SPSET is executed, all eight variables will be 0)",
		"parameters":"SPVAR Management number,Internal variable number OUT V "
	},
	"SPCOL (1)":{
		"description":"Sets sprite collision detection information\n\t\t- Must be called before any SPHIT instruction is used\n\t\t- SPCOLVEC should also be called\n\t\t- If used before SPSET, an error will occur",
		"parameters":"SPCOL Management number [,Scale adjustment] "
	},
	"SPCOL (2)":{
		"description":"Sets sprite collision detection information (including mask specification)\n\t\t- Must be called before any SPHIT instruction is used\n\t\t- SPCOLVEC should also be called\n\t\t- If used before SPSET, an error will occur",
		"parameters":"SPCOL Management number,[Scale adjustment],Mask "
	},
	"SPCOL (3)":{
		"description":"Sets sprite collision detection information (including range specification)\n\t\t- Must be called before any SPHIT instruction is used\n\t\t- SPCOLVEC should also be called\n\t\t- If used before SPSET, an error will occur",
		"parameters":"SPCOL Management number,Start point X,Start point Y,Width,Height,[Scale adjustment],Mask "
	},
	"SPCOL (4)":{
		"description":"Gets sprite collision detection information (scale adjustment and mask)\n\t\tIf used before SPSET, an error will occur",
		"parameters":"SPCOL Management number OUT Scale adjustment [,Mask] "
	},
	"SPCOL (5)":{
		"description":"Gets sprite collision detection information (range)\n\t\tIf used before SPSET, an error will occur",
		"parameters":"SPCOL Management number OUT Start point X,Start point Y,Width,Height "
	},
	"SPCOL (6)":{
		"description":"Gets sprite collision detection information (range and scale adjustment)\n\t\tIf used before SPSET, an error will occur",
		"parameters":"SPCOL Management number OUT Start point X,Start point Y,Width,Height,Scale adjustment "
	},
	"SPCOL (7)":{
		"description":"Gets sprite collision detection information (all information)\n\t\tIf used before SPSET, an error will occur",
		"parameters":"SPCOL Management number OUT Start point X,Start point Y,Width,Height,Scale adjustment,Mask "
	},
	"SPCOLVEC":{
		"description":"Sets a movement speed for sprite collision detection\n\t\t- It is recommended to also call this instruction when setting SPCOL\n\t\t- If used before SPSET, an error will occur",
		"parameters":"SPCOLVEC Management number [,Movement amount X,Movement amount Y]"
	},
	"SPHITSP (1)":{
		"description":"Detects sprite collision\n\t\t- SPCOL and SPCOLVEC should be called beforehand\n\t\t- If used before SPSET, an error will occur",
		"parameters":"Variable = SPHITSP( Management number [,First ID,Last ID] ) "
	},
	"SPHITSP (2)":{
		"description":"Detects sprite collision: collision between the specified sprites\n\t\t- SPCOL and SPCOLVEC should be called beforehand\n\t\t- If used before SPSET, an error will occur",
		"parameters":"Variable = SPHITSP( Management number ,Opponent management number ) "
	},
	"SPHITRC (1)":{
		"description":"Detects collision between a moving quadrangle and any sprite\n\t\t- SPCOL and SPCOLVEC should be called beforehand\n\t\t- If used before SPSET, an error will occur",
		"parameters":"SPHITRC( Start point X,Start point Y,Width,Height[,[Mask],Movement amount X,Movement amount Y] ) "
	},
	"SPHITRC (2)":{
		"description":"Detects collision between the specified sprite and a quadrangle\n\t\t- SPCOL and SPCOLVEC should be called beforehand\n\t\t- If used before SPSET, an error will occur",
		"parameters":"SPHITRC( Management number,Start point X,Start point Y,Width,Height[,[Mask],Movement amount X,Movement amount Y] ) "
	},
	"SPHITRC (3)":{
		"description":"Detects collision between the specified range of sprites and a quadrangle\n\t\t- SPCOL and SPCOLVEC should be called beforehand\n\t\t- If used before SPSET, an error will occur",
		"parameters":"SPHITRC( First ID,Last ID, Start point x,Start point y,Width,Height[,[Mask],Movement amount X, Movement amount Y] ) "
	},
	"SPHITINFO (1)":{
		"description":"Gets information on collision detection results (Time of collision)\n\t\tIf used before SPSET, an error will occur",
		"parameters":"SPHITINFO OUT TM "
	},
	"SPHITINFO (2)":{
		"description":"Gets information on collision detection results (Time of collision and coordinates)\n\t\tIf used before SPSET, an error will occur",
		"parameters":"SPHITINFO OUT TM,X1,Y1,X2,Y2 "
	},
	"SPHITINFO (3)":{
		"description":"Gets information on collision detection results (Time of collision, coordinates and speed)\n\t\tIf used before SPSET, an error will occur",
		"parameters":"SPHITINFO OUT TM,X1,Y1,VX1,VY1,X2,Y2,VX2,VY2 "
	},
	"SPFUNC":{
		"description":"Assigns a process to a sprite\n\t\t- An instruction for advanced users that is used when callback processing is required\n\t\t- All sprite processes are executed with CALL sprite\n\t\t- Instead of @Label, a user process defined using DEF can also be specified\n\t\t- At the processing target, the management number can be obtained using the CALLIDX system variable\n\t\t- If used before SPSET, an error will occur",
		"parameters":"SPFUNC Management number, @Label"
	},
	"SPUSED":{
		"description":"Checks if the specified sprite is in use",
		"parameters":"Variable=SPUSED(Management number)"
	},
	"BGPAGE (1)":{
		"description":"Sets a graphic page to assign to BG",
		"parameters":"BGPAGE Graphic page "
	},
	"BGPAGE (2)":{
		"description":"Gets the graphic page that has been assigned to BG",
		"parameters":"Variable=BGPAGE() "
	},
	"BGSCREEN":{
		"description":"Sets the BG screen size per layer",
		"parameters":"BGSCREEN Layer,Width,Height"
	},
	"BGCLR":{
		"description":"Clears the BG screen",
		"parameters":"BGCLR [Layer]"
	},
	"BGSHOW":{
		"description":"Shows the BG screen",
		"parameters":"BGSHOW Layer"
	},
	"BGHIDE":{
		"description":"Hides the BG screen",
		"parameters":"BGHIDE Layer"
	},
	"BGCLIP":{
		"description":"Specifies the display area of the BG screen",
		"parameters":"BGCLIP Layer [,Starting point X,Starting point Y,End point X,End point Y]"
	},
	"BGHOME (1)":{
		"description":"Sets the display origin of a layer\n\t\t- Origin for rotation and scaling of the BG screen",
		"parameters":"BGHOME Layer,Position X,Position Y "
	},
	"BGHOME (2)":{
		"description":"Gets the display origin of a layer",
		"parameters":"BGHOME Layer OUT HX,HY "
	},
	"BGOFS (1)":{
		"description":"Changes the display offset of the BG screen",
		"parameters":"BGOFS Layer,X,Y,[Z] "
	},
	"BGOFS (2)":{
		"description":"Gets BG coordinates",
		"parameters":"BGOFS Layer OUT X,Y[,Z]"
	},
	"BGROT (1)":{
		"description":"Rotates the BG screen",
		"parameters":"BGROT Layer,Angle "
	},
	"BGROT (2)":{
		"description":"Gets rotation information from the BG screen",
		"parameters":"BGROT Layer OUT R "
	},
	"BGSCALE (1)":{
		"description":"Scales the BG screen\n\t\t- When scaled down, BGs exceeding 3600 in total will not be displayed\n\t\t- If this display limit is exceeded, the BG screen will be distorted",
		"parameters":"BGSCALE Layer,Enlargement scale X,Enlargement scale Y "
	},
	"BGSCALE (2)":{
		"description":"Gets scale-up/down information from the BG screen",
		"parameters":"BGSCALE Layer OUT SX,SY "
	},
	"BGPUT":{
		"description":"Places a BG character on the BG screen\n\t\tNo image will be displayed for character number 0",
		"parameters":"BGPUT Layer,X,Y,Screen data"
	},
	"BGFILL":{
		"description":"Fills the BG screen with a BG character",
		"parameters":"BGFILL Layer,Start point X,Start point Y,End point X,End point Y,Screen data"
	},
	"BGGET":{
		"description":"Gets information on a BG character on the BG screen",
		"parameters":"Variable=BGGET( Layer, X, Y [,Coordinate system flag] )"
	},
	"BGANIM (1)":{
		"description":"Displays animation with BG (using animation data specified with an array)\n\t\t- Animation waits for a specified time, according to the value input\n\t\t- Animation starts from the frame following BGANIM\n\t\t- Up to 32 pieces of data will be accepted for each target element\n\t\t- If a negative value is specified for time, linear interpolation from the previous value will occur",
		"parameters":"BGANIM Layer,\"Animation target\",Data array [,Loop] "
	},
	"BGANIM (2)":{
		"description":"Displays animation using the BG (Specifying animation data with the DATA instruction)\n\t\t- Animation waits for a specified time, according to the value input\n\t\t- Animation starts from the frame following BGANIM\n\t\t- Up to 32 pieces of data will be accepted for each target element\n\t\t- If a negative value is specified for time, linear interpolation from the previous value will occur",
		"parameters":"BGANIM Layer,\"Animation target\",\"@Label string\" [,Loop] "
	},
	"BGANIM (3)":{
		"description":"Displays animation using the BG (Specifying animation data with arguments directly)\n\t\t- Animation waits for a specified time, according to the value input\n\t\t- Animation starts from the frame following BGANIM\n\t\t- Up to 32 pieces of data will be accepted for each target element\n\t\t- If a negative value is specified for time, linear interpolation from the previous value will occur",
		"parameters":"BGANIM Layer,\"Animation target\",Time 1,Item 1[,Item 2] [,Time 2,Item 1[,Item 2]]… [,Loop] "
	},
	"BGSTOP":{
		"description":"Stops BG animation",
		"parameters":"BGSTOP [Layer]"
	},
	"BGSTART":{
		"description":"Starts BG animation",
		"parameters":"BGSTART [Layer]"
	},
	"BGCHK":{
		"description":"Gets BG animation status",
		"parameters":"Variable=BGCHK( Layer )"
	},
	"BGVAR (1)":{
		"description":"Writes to a BG internal variable\n\t\tUser variables; there are eight variables for each BG layer",
		"parameters":"BGVAR Layer,Internal variable number,Numerical value "
	},
	"BGVAR (2)":{
		"description":"Reads a BG internal variable (function type)\n\t\tUser variables; there are eight variables for each BG layer",
		"parameters":"Variable=BGVAR( Layer number,Internal variable number )"
	},
	"BGVAR (3)":{
		"description":"Reads a BG internal variable\n\t\t- User variables; there are eight variables for each BG layer",
		"parameters":"BGVAR Layer,Internal variable number OUT V "
	},
	"BGCOPY":{
		"description":"Copies from the BG screen in character units",
		"parameters":"BGCOPY Layer,Start point X,Start point Y, End point X,End point Y, Transfer destination X,Transfer destination Y"
	},
	"BGLOAD":{
		"description":"Copies BG data from an array to the BG screen",
		"parameters":"BGLOAD Layer, [Start point X,Start point Y,Width,Height,] Numerical value array"
	},
	"BGSAVE":{
		"description":"Copies the contents of the BG screen to a numerical value array",
		"parameters":"BGSAVE Layer, [Start point X,Start point Y,Width,Height,] Numerical value array"
	},
	"BGCOORD":{
		"description":"Converts display coordinates to BG screen coordinates, or vice versa",
		"parameters":"BGCOORD Layer,Source X-coordinate,Source Y-coordinate[,Mode]OUT DX,DY"
	},
	"BGCOLOR (1)":{
		"description":"Sets the BG display color",
		"parameters":"BGCOLOR Layer, Color code "
	},
	"BGCOLOR (2)":{
		"description":"Gets the BG display color",
		"parameters":"BGCOLOR Layer OUT C32 "
	},
	"BGFUNC":{
		"description":"Assigns a callback process to a BG layer\n\t\t- An instruction for advanced users that is used when callback processing is required\n\t\t- All BG layer processes are executed with CALL BG\n\t\t- Instead of @Label, a user process defined using DEF can also be specified\n\t\t- At the processing target, a management number can be obtained using a CALLIDX system variable",
		"parameters":"BGFUNC Layer, @Label"
	},
	"BEEP":{
		"description":"Generates a simple alarm sound or sound effect",
		"parameters":"BEEP [Sound effect number][,Frequency][,Volume][,Pan pot]"
	},
	"BGMCHK":{
		"description":"Checks music playback status",
		"parameters":"Variable=BGMCHK( [Track number] )"
	},
	"BGMCLEAR":{
		"description":"Clears a user-defined piece of music",
		"parameters":"BGMCLEAR [User-defined tune number]"
	},
	"BGMPLAY (1)":{
		"description":"Plays music (Plays back registered BGM)\n\t\t- Up to 8 tunes can be played simultaneously (The total maximum number of sounds that can be generated simultaneously is 16)\n\t\t- See the second page for information on how to play music using MML",
		"parameters":"BGMPLAY [Track number,] Tune number [,Volume] "
	},
	"BGMPLAY (2)":{
		"description":"Plays music (Plays back the input MML data)\n\t\t- MML playback is performed in track 0\n\t\t- The MML tune will overwrite user-defined tune number 255\n\t\t- Executing immediately after BGMPLAY will cause a delay of approx. 2 frames",
		"parameters":"BGMPLAY \"MML string\" "
	},
	"BGMSET":{
		"description":"Predefines a user-defined piece of music\n\t\tExecuting immediately after BGMPLAY will cause a delay of approx. 2 frames",
		"parameters":"BGMSET User-defined tune number,\"MML string\""
	},
	"BGMSETD":{
		"description":"Predefines a user-defined tune\n\t\t- The DATA instruction should be used for internal registration of MML ( DATA \"CDEFGAB\" )\n\t\t- The end of DATA is determined according to the numerical value ( DATA 0 )\n\t\t- Internally, this is handled in the same way as RESTORE\n\t\t- RESTORE must be used to READ the data after BGMSETD\n\t\t- Executing immediately after BGMPLAY will cause a delay of approx. 2 frames",
		"parameters":"BGMSETD User-defined tune number,\"@Label string\""
	},
	"BGMVAR (1)":{
		"description":"Writes to an MML internal variable",
		"parameters":"BGMVAR Track number, Variable number, Value "
	},
	"BGMVAR (2)":{
		"description":"Reads an MML internal variable",
		"parameters":"Variable=BGMVAR(Track number, Variable number )"
	},
	"BGMSTOP (1)":{
		"description":"Stops playing music",
		"parameters":"BGMSTOP [Track number [,Fading time]]"
	},
	"BGMSTOP (2)":{
		"description":"Stops playing music\n\t\t- Forces ongoing sounds such as release sounds to stop\n\t\t- Executing this will cause user-defined BGM 255 to be overwritten",
		"parameters":"BGMSTOP -1 "
	},
	"BGMVOL":{
		"description":"Sets the volume for the specified track",
		"parameters":"BGMVOL [Track number,] Volume"
	},
	"WAVSET":{
		"description":"Defines the sound of an MML user-defined musical instrument",
		"parameters":"WAVSET Definition number,A,D,S,R,\"Waveform string\" [,Reference pitch]"
	},
	"WAVSETA":{
		"description":"Defines the sound of an MML user-defined musical instrument from an array\n\t\t- Used for sound definition from an array obtained with MICSAVE\n\t\t- 8180Hz sampling rate, 8 bits fixed",
		"parameters":"WAVSETA Definition number,A,D,S,R,Numerical value array [,Reference pitch][,Start subscript][,End subscript]"
	},
	"EFCOFF":{
		"description":"Turns off the effector setting",
		"parameters":"EFCOFF"
	},
	"EFCON":{
		"description":"Turns on the effector setting\n\t\tThe effect type should be selected with the EFCSET instruction",
		"parameters":"EFCON"
	},
	"EFCSET (1)":{
		"description":"Selects a music effect type",
		"parameters":"EFCSET Type number "
	},
	"EFCSET (2)":{
		"description":"Sets effect parameters (For advanced users)",
		"parameters":"EFCSET Initial reflection time,Reverberation sound delay time,Reverberation sound decay time,Reverberation sound filter coefficient 1,Reverberation sound filter coefficient 2,Initial reflection sound gain,Reverberation sound gain "
	},
	"EFCWET":{
		"description":"Sets the respective effect amounts for BEEP, BGM, and TALK",
		"parameters":"EFCWET BEEP effect value, BGM effect value, TALK effect value"
	},
	"TALK":{
		"description":"Generates synthesized speech\n\t\tAlphanumeric symbols are read out character-by-character ",
		"parameters":"TALK \"Voice string\""
	},
	"TALKCHK":{
		"description":"Checks the status of speech synthesis",
		"parameters":"Variable=TALKCHK()"
	},
	"TALKSTOP":{
		"description":"Stops the synthesized speech currently playing",
		"parameters":"TALKSTOP"
	},
	"FLOOR":{
		"description":"Gets the integer part (by rounding down to the whole number)\n\t\t- The largest integer that is not greater than the specified value will be obtained\n\t\t- FLOOR(12.5) will be 12, while FLOOR(-12.5) will be -13",
		"parameters":"Variable = FLOOR( Numerical value )"
	},
	"ROUND":{
		"description":"Gets the integer part (by rounding off to the nearest whole number)",
		"parameters":"Variable = ROUND( Numerical value )"
	},
	"CEIL":{
		"description":"Gets the integer part (by rounding up to the whole number)\n\t\t- The smallest integer that is not less than the specified value will be obtained\n\t\t- CEIL(12.5) will be 13, while CEIL(-12.5) will be -12",
		"parameters":"Variable = CEIL( Numerical value )"
	},
	"ABS":{
		"description":"Gets the absolute value",
		"parameters":"Variable = ABS( Numerical value )"
	},
	"SGN":{
		"description":"Gets the sign",
		"parameters":"Variable = SGN( Numerical value )"
	},
	"MIN (1)":{
		"description":"Gets the smallest value in the specified numerical value array",
		"parameters":"Variable = MIN( Numerical value array ) "
	},
	"MIN (2)":{
		"description":"Gets the smallest value from the specified multiple numerical values",
		"parameters":"Variable = MIN( Numerical value [,Numerical value…] ) "
	},
	"MAX (1)":{
		"description":"Gets the largest value in the specified numerical value array",
		"parameters":"Variable = MAX( Numerical value array ) "
	},
	"MAX (2)":{
		"description":"Gets the largest value from the specified multiple numerical values",
		"parameters":"Variable = MAX( Numerical value [,Numerical value…] ) "
	},
	"RND":{
		"description":"Gets an integer random number (0 - the maximum value minus 1)",
		"parameters":"Variable = RND( [ Seed ID, ] Maximum value )"
	},
	"RNDF":{
		"description":"Gets a real-type random number (a real-type random number greater than 0 and less than 1.0)",
		"parameters":"Variable = RNDF( [ Seed ID ] )"
	},
	"RANDOMIZE":{
		"description":"Initializes a random number series",
		"parameters":"RANDOMIZE Seed ID [, Seed value ]"
	},
	"SQR":{
		"description":"Finds the positive square root",
		"parameters":"Variable = SQR( Numerical value )"
	},
	"EXP":{
		"description":"Exponentiates e (natural logarithm base)",
		"parameters":"Variable = EXP( [ Numerical value ] )"
	},
	"LOG":{
		"description":"Finds the logarithm",
		"parameters":"Variable = LOG( Numerical value [,Base ] )"
	},
	"POW":{
		"description":"Exponentiates a value",
		"parameters":"Variable = POW( Numerical value, Multiplier )"
	},
	"PI":{
		"description":"Gets the circumference ratio",
		"parameters":"Variable = PI()"
	},
	"RAD":{
		"description":"Finds the radian value from a degree value",
		"parameters":"Variable = RAD( Numerical value )"
	},
	"DEG":{
		"description":"Finds the degree value from a radian value",
		"parameters":"Variable = DEG( Numerical value )"
	},
	"SIN":{
		"description":"Returns the sine value",
		"parameters":"Variable = SIN( Angle )"
	},
	"COS":{
		"description":"Returns the cosine value",
		"parameters":"Variable = COS( Angle )"
	},
	"TAN":{
		"description":"Returns the tangent value",
		"parameters":"Variable = TAN( Angle )"
	},
	"ASIN":{
		"description":"Returns the arc sine value",
		"parameters":"Variable = ASIN( Numerical value )"
	},
	"ACOS":{
		"description":"Returns the arc cosine value",
		"parameters":"Variable = ACOS( Numerical value )"
	},
	"ATAN (1)":{
		"description":"Returns the arc tangent value (from numerical values)",
		"parameters":"Variable = ATAN( Numerical value )"
	},
	"ATAN (2)":{
		"description":"Returns the arc tangent value (from XY-coordinates)",
		"parameters":"Variable = ATAN( Y-coordinate,X-coordinate ) "
	},
	"SINH":{
		"description":"Returns the hyperbolic sine value",
		"parameters":"Variable = SINH( Numerical value )"
	},
	"COSH":{
		"description":"Returns the hyperbolic cosine value",
		"parameters":"Variable = COSH( Numerical value )"
	},
	"TANH":{
		"description":"Returns the hyperbolic tangent value",
		"parameters":"Variable = TANH( Numerical value )"
	},
	"CLASSIFY":{
		"description":"Determines whether a given number is an ordinary numerical value, infinity, or not-a-number (NaN)",
		"parameters":"Variable = CLASSIFY( Numerical value )"
	},
	"ASC":{
		"description":"Gets a character code for the specified character (or string variable)",
		"parameters":"Variable = ASC( \"Character\" )"
	},
	"CHR$":{
		"description":"Returns the character for the specified character code",
		"parameters":"String variable = CHR$( Character code )"
	},
	"VAL":{
		"description":"Gets a numerical value from a character string",
		"parameters":"Variable = VAL( \"Character string\" )"
	},
	"STR$":{
		"description":"Gets a character string from a numerical value",
		"parameters":"String variable = STR$( Numerical value [,Number of digits] )"
	},
	"HEX$":{
		"description":"Gets a hexadecimal string from a numerical value",
		"parameters":"String variable = HEX$( Numerical value [,Number of digits] )"
	},
	"FORMAT$":{
		"description":"Stringizes values by using display formats to shape them",
		"parameters":"Variable$ = FORMAT$( \"Format string\", Value ,… )"
	},
	"LEN":{
		"description":"Gets the number of characters in a character string/Gets the number of elements in an array",
		"parameters":"&gt;Variable = LEN( \"Character string\" or Array variable )"
	},
	"MID$":{
		"description":"Extracts a character string with the specified number of characters from the specified position in the specified character string",
		"parameters":"String variable = MID$( \"Character string\", Start position, Number of characters )"
	},
	"LEFT$":{
		"description":"Extracts a character string with the specified number of characters from the left end of the specified character string",
		"parameters":"String variable = LEFT$( \"Character string\", Number of characters )"
	},
	"RIGHT$":{
		"description":"Extracts a character string with the specified number of characters from the right end of the specified character string",
		"parameters":"Variable$ = RIGHT$( \"Character string\", Number of characters )"
	},
	"INSTR":{
		"description":"Searches for the target character string in another character string",
		"parameters":"Variable = INSTR( [Start position,] \"Character string to search in\", \"Character string to search\" )"
	},
	"SUBST$":{
		"description":"Substitutes one character string with another string",
		"parameters":"String variable = SUBST$( \"Character string\", Start position, [Number of characters,] \"Substitute string\" )"
	},
	"PRGEDIT":{
		"description":"Specifies the program SLOT to manipulate, and the current line",
		"parameters":"PRGEDIT Program SLOT [,Line number]"
	},
	"PRGGET$":{
		"description":"Gets the current single line as a character string",
		"parameters":"String variable=PRGGET$()"
	},
	"PRGSET":{
		"description":"Substitutes the contents of the current line with the specified string\n\t\tIf PRGGET$ has returned an empty string, a line will be added",
		"parameters":"PRGSET \"Character string\""
	},
	"PRGINS":{
		"description":"Inserts a line in the current lineFor a character string including the line feed code CHR$(10), multiple lines will be inserted",
		"parameters":"PRGINS \"Character string\" [,Flag]"
	},
	"PRGDEL":{
		"description":"Deletes the current line",
		"parameters":"PRGDEL [Number of lines to delete]"
	},
	"PRGSIZE":{
		"description":"Gets the number of lines in the source code",
		"parameters":"Variable=PRGSIZE( [Program SLOT [,Type of value to get]] )"
	},
	"PRGNAME$":{
		"description":"Program file nameFile that has been handled with the LOAD/SAVE instruction",
		"parameters":"String variable=PRGNAME$([Program SLOT])"
	},
	"MOD":{
		"description":"Gets the remainder of Numerical value 1 divided by Numerical value 2",
		"parameters":"Variable=Numerical value 1 MOD Numerical value 2"
	},
	"DIV":{
		"description":"Gets the integer value of Numerical value 1 divided by Numerical value 2",
		"parameters":"Variable=Numerical value 1 DIV Numerical value 2"
	},
	"AND":{
		"description":"Logical AND of Numerical value 1 and Numerical value 2 (Multiplication of bits)",
		"parameters":"Variable=Numerical value 1 AND Numerical value 2"
	},
	"OR":{
		"description":"Logical OR of Numerical value 1 and Numerical value 2 (Addition of bits)",
		"parameters":"Variable=Numerical value 1 OR Numerical value 2"
	},
	"XOR":{
		"description":"Exclusive OR of Numerical value 1 and Numerical value 2 (If the values are the same, 0; if not, inversion)",
		"parameters":"Variable=Numerical value 1 XOR Numerical value 2"
	},
	"&lt;&lt;":{
		"description":"Shifts a numerical value to the left by the specified number of bits",
		"parameters":"Variable=Numerical value &lt;&lt; Number of times"
	},
	"&gt;&gt;":{
		"description":"Shifts a numerical value to the right by the specified number of bits",
		"parameters":"Variable=Numerical value &gt;&gt; Number of times"
	},
	"BGMPAUSE (1)":{
		"description":"Pauses music play (BGMCONT should be used to resume play)",
		"parameters":"BGMPAUSE [Track number [,Fading time]]"
	},
	"BGMPAUSE (2)":{
		"description":"Checks that music play is paused",
		"parameters":"BGMPAUSE([Track number])"
	},
	"BGMCONT":{
		"description":"Resumes music play that has been paused (BGMPAUSE should be used to pause play)",
		"parameters":"BGMCONT [Track number [,Fading time]]"
	},
	"SNDSTOP":{
		"description":"Stops all sound generation",
		"parameters":"SNDSTOP"
	},
	"MILLISEC":{
		"description":"Millisecond value since SmileBASIC was launched",
		"parameters":"MILLISEC"
	},
	"CLIPBOARD (1)":{
		"description":"Sets the content of the clipboard",
		"parameters":"CLIPBOARD Character string"
	},
	"CLIPBOARD (2)":{
		"description":"Gets the content of the clipboard",
		"parameters":"CLIPBOARD()"
	},
	"GOFS (1)":{
		"description":"Changes (moves) the coordinates of the graphic screen",
		"parameters":"GOFS X,Y"
	},
	"GOFS (2)":{
		"description":"Fetches the offset value of the graphic screen",
		"parameters":"GOFS OUT X,Y"
	},
	"BIN$":{
		"description":"Gets a Binary string from a numerical value",
		"parameters":"String variable = BIN$( Numerical value [,Number of digits] )"
	},
	"DLCOPEN":{
		"description":"Instruction that declares usage of additional content. As additional content for which usage must be declared using DLCOPEN is not available for purchase outside of Japan, this instruction will always give an error",
		"parameters":"DLCOPEN \"IP name\" [,\"IP name 2\" ,... ]\nDLCOPEN \"IP Name\" [,\"IP Name 2\" ,... ]"
	},
	"EXTFEATURE":{
		"description":"Support for additional instructions\n\t\t0 = Default, 1 = Advanced sound instruction pack is present",
		"parameters":"EXTFEATURE"
	},
	"BIQUAD":{
		"description":"BiQuad filter",
		"parameters":"BIQUAD Output array, Input array, Filter array"
	},
	"BQPARAM":{
		"description":"Calculates the filter coefficients of a BiQuad filter",
		"parameters":"BQPARAM Filter array, Filter type, Sampling rate, Cutoff frequency, Q value(Bandwidth) [,Amplification] "
	},
	"FFT":{
		"description":"Performs Fourier transform on complex number arrays",
		"parameters":"FFT Real output array, Imaginary output array, Real input array, Imaginary input array [,Window array]"
	},
	"IFFT":{
		"description":"Performs Inverse Fourier transform on complex number arrays",
		"parameters":"FFT Real output array, Imaginary output array, Real input array, Imaginary input array"
	},
	"FFTWFN":{
		"description":"Returns values of the specified window function to an array",
		"parameters":"FFTWFN Output array, Window type"
	},
	"PCMSTREAM (1)":{
		"description":"Assigns the specified array to the left and right channels to preform PCM playback\n\t\t- The length of the array specified first will be looped on playback",
		"parameters":"PCMSTREAM Pcm array [,Sampling rate]"
	},
	"PCMSTREAM (2)":{
		"description":"Performs PCM playback using arrays from the left and right\n\t\t- The length of the array specified first will be looped on playback",
		"parameters":"PCMSTREAM Left array, Right array [,Sampling rate]"
	},
	"PCMSTREAM (3)":{
		"description":"Changes the sampling rate of the PCMSTREAM currently being played back (if not being played back, no change)",
		"parameters":"PCMSTREAM Sampling rate"
	},
	"PCMPOS":{
		"description":"System variable that indicates the top position (array index) of transfer to the internal PCMSTREAM FIFO stack (when stack becomes empty, transfer will start from this position)",
		"parameters":"PCMPOS"
	},
	"PCMVOL":{
		"description":"Sets the volume of PCMSTREAM",
		"parameters":"PCMVOL [Channel,] Volume"
	},
	"PCMSTOP":{
		"description":"Stops PCMSTREAM",
		"parameters":"PCMSTOP"
	},
	"PCMCONT":{
		"description":"Resumes playback from the state when PCMSTREAM was stopped",
		"parameters":"PCMCONT"
	},
	"ARYOP":{
		"description":"Performs arithmetic operations on elements between arrays collectively\n\t\tetc.",
		"parameters":"ARYOP Operation type, Result storage array variable, Parameter 1, Parameter 2 [,Parameter 3]"
	},
	"RINGCOPY":{
		"description":"Instruction that copies data using the copy destination array variable as a ring buffer\n\t\t RINGCOPY copies values between arrays just like the copy instruction. However, when the copy source has more elements than the copy destination, RINGCOPY will not increase the number of elements, but return to the top and copy the remaining elements.",
		"parameters":"RINGCOPY Copy destination array, Copy destination offset,Copy source array [[,Copy source offset],Number of copy elements]"
	},
	"RINGCOPY":{
		"description":"Instruction that copies data using the copy destination array variable as a ring buffer\n\t\tIf used in a function type command, RINGCOPY returns the end position of the data copied as a ring buffer.",
		"parameters":"Variable = RINGCOPY(Copy destination array, Copy destination offset,Copy source array [[,Copy source offset],Number of copy elements])"
	}
}
